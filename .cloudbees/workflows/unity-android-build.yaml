apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: unity-android-simple-build

on:
  workflow_dispatch:

jobs:
  build:
    steps:
      - name: Checkout
        uses: https://github.com/cloudbees-io/checkout@v1
        with:
          repository: lsa26/AngryBirdsRemakeUnity
          ref: main
      
      - name: Build with Unity (simple approach)
        uses: docker://unityci/editor:ubuntu-2020.1.1f1-android-0.3.0
        shell: bash
        run: |
          # Créer les répertoires nécessaires
          mkdir -p "${CLOUDBEES_WORKSPACE}/Builds/Android"
          
          # Vérifier si la licence Unity est nécessaire
          echo "Configuration de la licence Unity..."
          mkdir -p /root/.local/share/unity3d/Unity/
          
          # Énumérer les scènes du projet
          echo "Scènes du projet:"
          find "${CLOUDBEES_WORKSPACE}/Assets" -name "*.unity" -type f
          
          # Exécuter Unity directement avec BuildPipeline en mode batch
          echo "Exécution du build Unity simple..."
          /opt/unity/Editor/Unity \
            -batchmode \
            -nographics \
            -projectPath "${CLOUDBEES_WORKSPACE}" \
            -logFile "${CLOUDBEES_WORKSPACE}/unity_simple_build.log" \
            -buildTarget Android \
            -buildWindowsPlayer "${CLOUDBEES_WORKSPACE}/Builds/Android/AngryBirdsRemake.apk" \
            -quit || true
          
          # Afficher le log complet
          if [ -f "${CLOUDBEES_WORKSPACE}/unity_simple_build.log" ]; then
            echo "=== Log de build Unity ==="
            cat "${CLOUDBEES_WORKSPACE}/unity_simple_build.log"
            echo "======================="
          else
            echo "Aucun log de build trouvé"
          fi
          
          # Vérifier la sortie
          echo "Contenu du dossier de build:"
          find "${CLOUDBEES_WORKSPACE}/Builds" -type f | sort
