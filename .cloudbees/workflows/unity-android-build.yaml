apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: unity-android-build

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  build:
    steps:
      - name: Checkout
        uses: https://github.com/cloudbees-io/checkout@v1
        with:
          repository: lsa26/AngryBirdsRemakeUnity
          ref: main

      - name: Build with Unity in custom container
        uses: docker://gableroux/unity3d:2020.1.1f1-android
        shell: bash
        run: |
          # Définir les variables d'environnement nécessaires
          export UNITY_LICENSE_CONTENT=$UNITY_LICENSE
          export UNITY_USERNAME=$UNITY_USERNAME
          export UNITY_PASSWORD=$UNITY_PASSWORD
          
          # Activer la licence Unity (peut être nécessaire selon l'image)
          echo "Activation de la licence Unity..."
          echo "$UNITY_LICENSE_CONTENT" > /tmp/unity3d.ulf
          xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
            /opt/Unity/Editor/Unity -batchmode -nographics -logFile /tmp/unity-activation.log \
            -quit -manualLicenseFile /tmp/unity3d.ulf || true
          
          # Afficher la structure du projet
          echo "Structure du projet Unity :"
          find "${CLOUDBEES_WORKSPACE}" -type f -name "*.unity" | sort
          find "${CLOUDBEES_WORKSPACE}" -type f -name "*.cs" | grep "Editor" | sort
          
          # Création des répertoires nécessaires
          mkdir -p "${CLOUDBEES_WORKSPACE}/Builds/Android"
          
          # Effectuer le build avec xvfb pour émuler un écran
          echo "Démarrage du build Unity..."
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
            /opt/Unity/Editor/Unity \
              -batchmode \
              -projectPath "${CLOUDBEES_WORKSPACE}" \
              -logFile "${CLOUDBEES_WORKSPACE}/unity_build.log" \
              -executeMethod BuildScript.Build \
              -quit
          
          # Vérifier le résultat et afficher le log
          BUILD_RESULT=$?
          if [ -f "${CLOUDBEES_WORKSPACE}/unity_build.log" ]; then
            echo "Log de build Unity :"
            cat "${CLOUDBEES_WORKSPACE}/unity_build.log"
          else
            echo "Fichier de log non trouvé"
          fi
          
          # Vérifier si des APK ont été générés
          find "${CLOUDBEES_WORKSPACE}/Builds" -name "*.apk" | while read apk; do
            echo "APK généré: $apk"
            ls -lh "$apk"
          done
          
          # Retourner le code de sortie du build
          exit $BUILD_RESULT
        env:
          UNITY_LICENSE: ${{secrets.UNITY_LICENSE}}
          UNITY_USERNAME: ${{secrets.UNITY_USERNAME}}
          UNITY_PASSWORD: ${{secrets.UNITY_PASSWORD}}

      - name: Archive Build
        uses: docker://ubuntu:20.04
        shell: bash
        run: |
          # Vérification et archivage des résultats
          if [ -d "${CLOUDBEES_WORKSPACE}/Builds" ]; then
            echo "Artéfacts de build trouvés:"
            find "${CLOUDBEES_WORKSPACE}/Builds" -type f -name "*.apk"
          else
            echo "Aucun artéfact de build trouvé"
            exit 1
          fi
